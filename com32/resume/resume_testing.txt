	How to parse manually the image

This is an example of a shell script implementation of the parser:

# Beginning of data, PAGE_SIZE aligned
j=118784
# Number of pfns found
good=0

# 16432 can be found in the header
while [[ $good -lt 16432 ]]; do
	let tmp2=$j+4
	let size=`od -j$tmp2 -N4 -Ad -t u4 image | awk '{print $2}'`
	if [[ (! $? -eq 0) || $size -gt 4096 ]]; then
		let j=$j+1
		continue
	else
		let good=$good+1
		echo "$j	[$size]	($good)	=	`od -j$j -N4 -Ad -tu4 image | awk '{print $2}'`"
		#echo "`od -j$j -N4 -Ad -tu4 image | awk '{print $2}'`"
		let j=$j+$size+8
	fi
done

	How to test resume.c32 using VMware Workstation

Create a blank VM with a small disk and format it as ext3.

Mount the .vmdk to customize it:

	sudo vmware-mount /VMS/TestHDD/TestHDD.vmdk /media/vmdk

Example of extlinux.conf:

	DEFAULT resume.c32 image
	PROMPT 0
	# Avoid infinite loop if unable to resume
	NOESCAPE 0
	SERIAL 0

Umount it before running the VM:

	sudo vmware-mount -x

Add the serial pipe to your .vmx:

	serial0.present = "TRUE"
	serial0.startConnected = "TRUE"
	serial0.fileType = "pipe"
	serial0.fileName = "/tmp/TestHDDserial"
	serial0.tryNoRxLoss = "TRUE"

When starting the VM, you can interact with it using:

	socat unix-connect:/tmp/TestHDDserial stdout


	How to create a VMDK file

	qemu-img create -s -f vmdk TestHDD.vmdk 200M
	sudo vmware-mount TestHDD.vmdk /media/vmx
	sudo cp resume.c32 /media/vmx
	sudo cp image.gz  /media/vmx/image
	sudo vmware-mount -x
	qemu -M pc -hda TestHDD.vmdk -m 1000 -no-kqemu -boot c -s -S


	How to create a raw file for Bochs

	bximage
	sudo losetup /dev/loop0 hd.img -o 32256
	sudo mkfs.msdos /dev/loop0
	sudo syslinux /dev/loop0
	sudo mount /dev/loop0 /mnt/vmx
	sudo cp resume.c32 /media/vmx
	sudo cp image.gz /mnt/vmx
	sudo umount /mnt/vmx/
	sudo losetup -d /dev/loop0
